package com.ly666.ahead.controller.admin;import com.baomidou.mybatisplus.extension.service.additional.query.impl.LambdaQueryChainWrapper;import com.ly666.ahead.entity.Admin;import com.ly666.ahead.global.defaultValue.GlobalProperties;import com.ly666.ahead.security.model.auth.AdminToken;import com.ly666.ahead.security.util.SecurityUtil;import com.ly666.ahead.service.IAdminService;import com.ly666.ahead.util.MailService;import lombok.extern.slf4j.Slf4j;import org.apache.shiro.SecurityUtils;import org.apache.shiro.authc.AuthenticationException;import org.apache.shiro.subject.Subject;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.util.StringUtils;import org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.RequestMapping;import org.thymeleaf.TemplateEngine;import org.thymeleaf.context.Context;/** * @author ：luoyi * @date ：Created in 2019/5/31 22:50 * @desc : {} */@Slf4j@Controller@RequestMapping("/admin")public class AdminController {	private IAdminService adminService;	private final TemplateEngine templateEngine;	private final MailService mailService;	public AdminController(final IAdminService adminService, final TemplateEngine templateEngine, final MailService mailService) {		this.adminService = adminService;		this.templateEngine = templateEngine;		this.mailService = mailService;	}	@PostMapping("/login")	public String adminLogin(String account, String password, Model model){		log.info(account+"===>尝试登入");		Subject subject = SecurityUtils.getSubject();		AdminToken adminToken = new AdminToken(account, password, GlobalProperties.AUTH_ADMIN);		try {			subject.login(adminToken);			log.info("登入成功");		}catch (AuthenticationException e){			String msg="账户："+account+"===>认证失败";			log.warn(msg);			model.addAttribute("error",model);			return "redirect:/";		}		return "admin/index";	}	@PostMapping("/findPwd")	public String adminFindPwd(String account, String username, Model model){		LambdaQueryChainWrapper<Admin> admin = adminService.lambdaQuery().eq(Admin::getAdminEamil, account).eq(Admin::getAdminName, username);		if (StringUtils.isEmpty(admin)){			model.addAttribute("adminFindError","没有找到用户信息");			return "admin/findPwd";		}		String key = SecurityUtil.generaPassword(account);		log.info("已创建key:"+key);		//创建邮件html模板		Context context = new Context();		context.setVariable("key", key);		String emailTemplate = templateEngine.process("util/email/emailFindPwd", context);		try {			mailService.sendHtmlMail(account, "找回密码", emailTemplate);		} catch (Exception e) {			log.warn("发送邮件出现异常");		}		log.info("邮件发送成功");		return "home";	}}