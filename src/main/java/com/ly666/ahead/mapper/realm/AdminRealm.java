package com.ly666.ahead.mapper.realm;import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;import com.ly666.ahead.entity.Admin;import com.ly666.ahead.global.defaultValue.GlobalProperties;import com.ly666.ahead.security.model.auth.AuthType;import com.ly666.ahead.service.IAdminService;import org.apache.shiro.authc.AuthenticationException;import org.apache.shiro.authc.AuthenticationInfo;import org.apache.shiro.authc.AuthenticationToken;import org.apache.shiro.authc.SimpleAuthenticationInfo;import org.apache.shiro.authz.AuthorizationInfo;import org.apache.shiro.realm.AuthorizingRealm;import org.apache.shiro.subject.PrincipalCollection;import org.apache.shiro.util.ByteSource;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.util.StringUtils;/** * @author ：luoyi * @date ：Created in 2019/5/31 20:55 * @desc : {} */public class AdminRealm extends AuthorizingRealm {	@Autowired	private IAdminService adminService;	@Override	public boolean supports(AuthenticationToken token) {		return token instanceof AuthType;	}	@Override	protected AuthenticationInfo doGetAuthenticationInfo(final AuthenticationToken token) throws AuthenticationException {		String account = (String)token.getPrincipal();		Admin admin = adminService.getOne(new QueryWrapper<Admin>().lambda().eq(Admin::getAdminEamil, account));		if (StringUtils.isEmpty(admin)){			return null;		}		return new SimpleAuthenticationInfo(account,admin.getAdminPassword(), ByteSource.Util.bytes(account+ GlobalProperties.HASH_SALT),getName());	}	@Override	protected AuthorizationInfo doGetAuthorizationInfo(final PrincipalCollection principals) {		String account = (String) principals.getPrimaryPrincipal();				return null;	}}