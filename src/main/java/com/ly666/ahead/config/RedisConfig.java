package com.ly666.ahead.config;import com.fasterxml.jackson.annotation.JsonAutoDetect;import com.fasterxml.jackson.annotation.PropertyAccessor;import com.fasterxml.jackson.databind.ObjectMapper;import org.springframework.cache.CacheManager;import org.springframework.cache.annotation.CachingConfigurerSupport;import org.springframework.cache.annotation.EnableCaching;import org.springframework.cache.interceptor.KeyGenerator;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.data.redis.cache.RedisCacheManager;import org.springframework.data.redis.connection.RedisConnectionFactory;import org.springframework.data.redis.core.RedisTemplate;import org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;import org.springframework.data.redis.serializer.StringRedisSerializer;/** * @author ：luoyi * @date ：Created in 2019/5/15 18:50 * @desc : {redis配置} */@Configuration@EnableCachingpublic class RedisConfig extends CachingConfigurerSupport {	@Bean	public KeyGenerator keyGenerator() {		return (target, method, params) -> {			StringBuilder sb = new StringBuilder();			sb.append(target.getClass().getName());			sb.append(method.getName());			for (Object obj : params) {				sb.append(obj.toString());			}			return sb.toString();		};	}	@SuppressWarnings("rawtypes")	@Bean	public CacheManager cacheManager(RedisConnectionFactory factory) {		return RedisCacheManager.builder(factory).build();	}	@Bean	@SuppressWarnings("all")	public RedisTemplate<String, Object> redisTemplate(RedisConnectionFactory factory) {		RedisTemplate<String, Object> template = new RedisTemplate<String, Object>();		template.setConnectionFactory(factory);		StringRedisSerializer stringRedisSerializer = new StringRedisSerializer();		// key采用String的序列化方式		template.setKeySerializer(stringRedisSerializer);		// hash的key也采用String的序列化方式		template.setHashKeySerializer(stringRedisSerializer);		Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer(Object.class);		ObjectMapper om = new ObjectMapper();		om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);		om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);		jackson2JsonRedisSerializer.setObjectMapper(om);		// value序列化方式采用jackson		template.setValueSerializer(jackson2JsonRedisSerializer);		// hash的value序列化方式采用jackson		template.setHashValueSerializer(jackson2JsonRedisSerializer);		template.afterPropertiesSet();		return template;	}}