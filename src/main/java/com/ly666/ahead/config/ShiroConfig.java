package com.ly666.ahead.config;import com.ly666.ahead.global.defaultValue.GlobalProperties;import com.ly666.ahead.mapper.realm.AdminRealm;import com.ly666.ahead.mapper.realm.StudentRealm;import com.ly666.ahead.security.shiro.CustomModularRealm;import org.apache.shiro.authc.Authenticator;import org.apache.shiro.authc.credential.CredentialsMatcher;import org.apache.shiro.authc.credential.HashedCredentialsMatcher;import org.apache.shiro.authc.pam.ModularRealmAuthenticator;import org.apache.shiro.mgt.SecurityManager;import org.apache.shiro.realm.Realm;import org.apache.shiro.spring.LifecycleBeanPostProcessor;import org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor;import org.apache.shiro.spring.web.ShiroFilterFactoryBean;import org.apache.shiro.web.mgt.DefaultWebSecurityManager;import org.apache.shiro.web.session.mgt.DefaultWebSessionManager;import org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.context.annotation.DependsOn;import java.util.ArrayList;import java.util.LinkedHashMap;import java.util.Map;/** * @author ：luoyi * @date ：Created in 2019/5/11 13:13 * @desc : {shiro配置} */@Configurationpublic class ShiroConfig {	/**	 * 配置shiro过滤器	 * */	@Bean(name = "shirFilter")	public ShiroFilterFactoryBean shiroFilter(SecurityManager securityManager) {		ShiroFilterFactoryBean shiroFilterFactoryBean = new ShiroFilterFactoryBean();		shiroFilterFactoryBean.setLoginUrl("/");		//注入shiro安全管理器		shiroFilterFactoryBean.setSecurityManager(securityManager);		//设置过滤拦截器链		Map<String, String> filterChainDefinitionMap = new LinkedHashMap<>();		// 配置需要拦截的链接		filterChainDefinitionMap.put("/admin/main/**", "authc");		filterChainDefinitionMap.put("/student/main/**", "authc");		shiroFilterFactoryBean.setFilterChainDefinitionMap(filterChainDefinitionMap);		return shiroFilterFactoryBean;	}	/**	 * 配置shiro安全管理器	 */	@Bean	public SecurityManager securityManager() {		DefaultWebSecurityManager securityManager = new DefaultWebSecurityManager();		//设置realm		securityManager.setRealm(adminRealm());		//设置session管理		securityManager.setSessionManager(sessionManager());		return securityManager;	}	/**	 * 配置的realm的顺序时请保证{@link com.ly666.ahead.global.defaultValue.GlobalProperties}类中以{AUTH}开头的全局常量的统一	 * */	@Bean	public Authenticator authenticator(){		ModularRealmAuthenticator authenticator = new CustomModularRealm();		ArrayList<Realm> realms = new ArrayList<>();		realms.add(adminRealm());		realms.add(studentRealm());		authenticator.setRealms(realms);		return authenticator;	}	/**	 * 配置adminRealm	 */	@Bean	public AdminRealm adminRealm() {		AdminRealm adminRealm = new AdminRealm();		//设置凭证匹配器		adminRealm.setCredentialsMatcher(credentialsMatcher());		//开启认证缓存		/*adminRealm.setAuthenticationCachingEnabled(true);		adminRealm.setAuthenticationCacheName("authenticationCache");*/		return adminRealm;	}	/**	 * 配置studentRealm	 */	@Bean	public StudentRealm studentRealm() {		StudentRealm studentRealm = new StudentRealm();		//设置凭证匹配器		studentRealm.setCredentialsMatcher(credentialsMatcher());		//开启认证缓存		/*adminRealm.setAuthenticationCachingEnabled(true);		adminRealm.setAuthenticationCacheName("authenticationCache");*/		return studentRealm;	}	/**	 * 配置凭证匹配器	 */	@Bean	public CredentialsMatcher credentialsMatcher() {		HashedCredentialsMatcher credentialsMatcher = new HashedCredentialsMatcher();		credentialsMatcher.setHashAlgorithmName(GlobalProperties.HASH_ALGORITHM_NAME);//散列算法		credentialsMatcher.setHashIterations(GlobalProperties.HASH_ITERATIONS);//散列次数		credentialsMatcher.setStoredCredentialsHexEncoded(true);//设置16进值编码		return credentialsMatcher;	}	/**	 * 会话管理器	 */	@Bean	public DefaultWebSessionManager sessionManager() {		DefaultWebSessionManager sessionManager = new DefaultWebSessionManager();		sessionManager.setGlobalSessionTimeout(60 * 60 * 1000);		return sessionManager;	}	/**	 * Shiro生命周期处理器 * @return	 */	@Bean	public LifecycleBeanPostProcessor lifecycleBeanPostProcessor() {		return new LifecycleBeanPostProcessor();	}	/**	 * 开启Shiro的注解(如@RequiresRoles,@RequiresPermissions),需借助SpringAOP扫描使用Shiro注解的类,并在必要时进行安全逻辑验证 * 配置以下两个bean(DefaultAdvisorAutoProxyCreator(可选)和AuthorizationAttributeSourceAdvisor)即可实现此功能 * @return	 */	@Bean	@DependsOn({"lifecycleBeanPostProcessor"})	public DefaultAdvisorAutoProxyCreator advisorAutoProxyCreator() {		DefaultAdvisorAutoProxyCreator advisorAutoProxyCreator = new DefaultAdvisorAutoProxyCreator();		// 强制使用cglib		advisorAutoProxyCreator.setProxyTargetClass(true);		return advisorAutoProxyCreator;	}	@Bean	public AuthorizationAttributeSourceAdvisor authorizationAttributeSourceAdvisor(SecurityManager securityManager) {		AuthorizationAttributeSourceAdvisor authorizationAttributeSourceAdvisor = new AuthorizationAttributeSourceAdvisor();		authorizationAttributeSourceAdvisor.setSecurityManager(securityManager);		return authorizationAttributeSourceAdvisor;	}}