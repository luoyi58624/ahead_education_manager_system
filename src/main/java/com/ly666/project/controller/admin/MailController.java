package com.ly666.project.controller.admin;import com.ly666.project.entity.Admin;import com.ly666.project.global.defaultValue.GlobalProperties;import com.ly666.project.global.defaultValue.GlobalStatus;import com.ly666.project.model.JsonResponse;import com.ly666.project.service.IAdminService;import com.ly666.project.util.MailService;import com.ly666.project.util.RedisUtil;import com.ly666.project.util.SecurityUtil;import io.swagger.annotations.Api;import lombok.extern.slf4j.Slf4j;import org.springframework.http.HttpStatus;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.util.StringUtils;import org.springframework.web.bind.annotation.*;import org.thymeleaf.TemplateEngine;import org.thymeleaf.context.Context;import springfox.documentation.annotations.ApiIgnore;/** * @author ：luoyi * @date ：Created in 2019/5/9 21:20 * @desc : {} */@Slf4j@Controller@RequestMapping("/blogServer/email")@Api(value="发送邮件",tags = {"邮件操作"})public class MailController {	private final MailService mailService;	private final IAdminService adminService;	private final TemplateEngine templateEngine;	private final RedisUtil redisUtil;	public MailController(final MailService mailService, final IAdminService adminService, final TemplateEngine templateEngine, final RedisUtil redisUtil) {		this.mailService = mailService;		this.adminService = adminService;		this.templateEngine = templateEngine;		this.redisUtil = redisUtil;	}	@PostMapping(value = "/registerAdmin")	@ResponseBody	@ApiIgnore	public JsonResponse EMAILEmail(@RequestBody Admin admin) {		log.debug("邮箱:" + admin.getAdminEamil() + "请求注册");		if(adminService.isExistEmail(admin.getAdminEamil())){			log.debug("邮箱:" + admin.getAdminEamil() + "已存在");			return new JsonResponse(HttpStatus.FORBIDDEN.value(), GlobalStatus.EMAIL_FORBIDDEN,"此邮箱已存在");		}		String key = SecurityUtil.generaPassword(admin.getAdminEamil());		log.debug("已创建key:"+key);		//创建邮件html模板		Context context = new Context();		context.setVariable("key", key);		String emailTemplate = templateEngine.process("emailTemplate", context);		try {			mailService.sendHtmlMail(admin.getAdminEamil(), "激活账号", emailTemplate);		} catch (Exception e) {			log.warn("发送邮件出现异常");			return new JsonResponse(HttpStatus.FORBIDDEN.value(), GlobalStatus.EMAIL_FAILED,"发送邮件出现异常");		}		log.debug("邮件发送成功");		redisUtil.set(GlobalProperties.REDIS_PREFIX_INSTANT_USER+key,admin,300);		return new JsonResponse(HttpStatus.OK.value(), GlobalStatus.EMAIL_OK,"邮件发送成功");	}	/**	 * 激活邮箱	 * @param key    匹配的用户激活的key值	 * @param model  跳转页面的内容	 * @return       返回跳转页面	 */	@ApiIgnore	@RequestMapping("/activeAccount/{key}")	public String activeEmail(@PathVariable String key, Model model) {		Admin admin = (Admin) redisUtil.get(GlobalProperties.REDIS_PREFIX_INSTANT_USER+key);		if (StringUtils.isEmpty(admin)) {			model.addAttribute("success", false);			model.addAttribute("status", GlobalStatus.EMAIL_DROP);			return "adminActivate";		} else {			if (adminService.adminRegister(admin)){				model.addAttribute("success", true);				model.addAttribute("adminName", admin.getAdminName());				redisUtil.del(key);				return "adminActivate";			}else{				model.addAttribute("success", false);				model.addAttribute("status", GlobalStatus.EMAIL_FORBIDDEN);				redisUtil.del(key);				return "adminActivate";			}		}	}}