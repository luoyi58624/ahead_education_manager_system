package com.ly666.project.util;import com.baomidou.mybatisplus.annotation.DbType;import com.baomidou.mybatisplus.annotation.IdType;import com.baomidou.mybatisplus.core.exceptions.MybatisPlusException;import com.baomidou.mybatisplus.core.toolkit.StringPool;import com.baomidou.mybatisplus.core.toolkit.StringUtils;import com.baomidou.mybatisplus.generator.AutoGenerator;import com.baomidou.mybatisplus.generator.InjectionConfig;import com.baomidou.mybatisplus.generator.config.*;import com.baomidou.mybatisplus.generator.config.converts.MySqlTypeConvert;import com.baomidou.mybatisplus.generator.config.po.TableInfo;import com.baomidou.mybatisplus.generator.config.rules.DbColumnType;import com.baomidou.mybatisplus.generator.config.rules.NamingStrategy;import com.baomidou.mybatisplus.generator.engine.FreemarkerTemplateEngine;import java.io.File;import java.util.ArrayList;import java.util.List;import java.util.Scanner;/** * @author ：i18n * @date ：Created in 2019/4/20 12:25 * @desc : {} */public class MybatisGenerator {	public static void main(String[] args) {		// 代码生成器		AutoGenerator generator = new AutoGenerator();		//设置模板引擎,根据需要是否生成各个层的包		generator.setTemplateEngine(new FreemarkerTemplateEngine());		// 全局配置		GlobalConfig gc = new GlobalConfig();		//获取当前项目的绝对路径		String projectPath = System.getProperty("user.dir");		//设置文件输出路径，默认为D盘根目录		gc.setOutputDir(projectPath +				File.separator + "src" +				File.separator + "main" +				File.separator + "java");		//开发人员		gc.setAuthor("luoyi");		//是否覆盖已有文件		gc.setFileOverride(true);		//是否打开输出目录		gc.setOpen(false);		//是否在xml中添加二级缓存配置		gc.setEnableCache(false);		//开启 swagger2 模式		gc.setSwagger2(false);		gc.setIdType(IdType.AUTO);		//生成基本的resultMap		gc.setBaseResultMap(true);		//生成基本的SQL片段		gc.setBaseColumnList(false);		generator.setGlobalConfig(gc);		// 数据源配置		DataSourceConfig dsc = new DataSourceConfig();		dsc.setDbType(DbType.MYSQL);		dsc.setUrl("jdbc:mysql://localhost:3306/ahead_education_manager_system?serverTimezone=GMT%2B8&useUnicode=true&characterEncoding=utf-8&useSSL=false");		dsc.setDriverName("com.mysql.cj.jdbc.Driver");		dsc.setUsername("root");		dsc.setPassword("123456");		//类型转换		dsc.setTypeConvert(new MySqlTypeConvert() {			@Override			public DbColumnType processTypeConvert(GlobalConfig globalConfig, String fieldType) {				System.out.println("转换类型：" + fieldType);				//tinyint转换成Boolean				if (fieldType.toLowerCase().contains("tinyint")) {					return DbColumnType.BOOLEAN;				}				//将数据库中datetime转换成LocalDateTime				if (fieldType.toLowerCase().contains("datetime")) {					return DbColumnType.LOCAL_DATE_TIME;				}				return (DbColumnType) super.processTypeConvert(globalConfig, fieldType);			}		});		generator.setDataSource(dsc);		// 包配置		PackageConfig pc = new PackageConfig();		//pc.setModuleName(scanner("模块名"));		//设置父包输出目录，如果不设置则默认为com.baomidou		pc.setParent(scanner("请输入项目的父包名，即源目录下到各个模块之上的包名"));		generator.setPackageInfo(pc);		// 策略配置		StrategyConfig strategy = new StrategyConfig();		//生成 @RestController 控制器		strategy.setRestControllerStyle(true);		//数据库表映射到实体的命名策略,目前使用下划线转驼峰命名		strategy.setNaming(NamingStrategy.underline_to_camel);		//数据库表字段映射到实体的命名策略,未指定按照 naming 执行,当前指定为驼峰匹配		strategy.setColumnNaming(NamingStrategy.underline_to_camel);		//是否跳过视图		strategy.setSkipView(true);		//设置lombok		strategy.setEntityLombokModel(true);		//是否生成实体时，生成字段注解		strategy.setEntityTableFieldAnnotationEnable(true);		//需要生成的表		strategy.setInclude(scanner("请输入数据库表名，若存在多个表请使用英文逗号分割").split(","));		generator.setStrategy(strategy);		// 配置模板		TemplateConfig templateConfig = new TemplateConfig();		//模板路径配置，如果设为null则不生成		templateConfig.setController(null);		templateConfig.setService(null);		templateConfig.setServiceImpl(null);		templateConfig.setXml(null);		generator.setTemplate(templateConfig);		// 自定义配置		InjectionConfig cfg = new InjectionConfig() {			@Override			public void initMap() {				// to do nothing			}		};		// 如果模板引擎是 freemarker		String templatePath = "/templates/mapper.xml.ftl";		// 自定义输出配置		List<FileOutConfig> focList = new ArrayList<>();		// 自定义配置会被优先输出		focList.add(new FileOutConfig(templatePath) {			@Override			public String outputFile(TableInfo tableInfo) {				// 自定义输出文件名 ， 如果你 Entity 设置了前后缀、此处注意 xml 的名称会跟着发生变化！！				return projectPath +						File.separator + "src" + File.separator + "main" +						File.separator + "resources" + File.separator + "mybatis" +						File.separator + "mapper" + File.separator +						tableInfo.getEntityName() + "Mapper" + StringPool.DOT_XML;			}		});		cfg.setFileOutConfigList(focList);		//设置自定义配置		generator.setCfg(cfg);		//开始执行		generator.execute();	}	//输出信息	private static String scanner(String tip) {		Scanner scanner = new Scanner(System.in);		System.out.println(tip + "：");		if (scanner.hasNext()) {			String ipt = scanner.next();			if (StringUtils.isNotEmpty(ipt)) {				return ipt;			}		}		throw new MybatisPlusException("请输入正确的" + tip + "！");	}}