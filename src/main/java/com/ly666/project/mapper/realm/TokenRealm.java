package com.ly666.project.mapper.realm;import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;import com.ly666.project.entity.Admin;import com.ly666.project.model.jwt.JwtToken;import com.ly666.project.service.IAdminService;import com.ly666.project.util.SecurityUtil;import lombok.extern.slf4j.Slf4j;import org.apache.shiro.authc.AuthenticationException;import org.apache.shiro.authc.AuthenticationInfo;import org.apache.shiro.authc.AuthenticationToken;import org.apache.shiro.authc.SimpleAuthenticationInfo;import org.apache.shiro.authz.AuthorizationInfo;import org.apache.shiro.realm.AuthorizingRealm;import org.apache.shiro.subject.PrincipalCollection;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.util.StringUtils;/** * @author ：luoyi * @date ：Created in 2019/5/26 15:43 * @desc : {} */@Slf4jpublic class TokenRealm extends AuthorizingRealm {	@Autowired	IAdminService userService;	/**	 * 必须重写此方法，不然Shiro会报错	 */	@Override	public boolean supports(AuthenticationToken token) {		return token instanceof JwtToken;	}	@Override	protected AuthorizationInfo doGetAuthorizationInfo(final PrincipalCollection principals) {		return null;	}	/**	 * 认证信息(身份验证)	 * Authentication 是用来验证用户身份	 */	@Override	protected AuthenticationInfo doGetAuthenticationInfo(final AuthenticationToken token) throws AuthenticationException {		log.debug("token认证realm===========");		String account = (String) token.getCredentials();		log.debug("认证token===>"+account);		String email = SecurityUtil.getAccount(account);		if (StringUtils.isEmpty(email)) {			throw new AuthenticationException("token invalid");		}		Admin admin = userService.getOne(new QueryWrapper<Admin>().lambda().eq(Admin::getAdminEamil, email));		if (StringUtils.isEmpty(admin)) {			throw new AuthenticationException("user didn't existed!");		}		if (!SecurityUtil.verify(account, email, admin.getAdminPassword())) {			throw new AuthenticationException("username or password error");		}		return new SimpleAuthenticationInfo(account, account, getName());	}}