package com.ly666.project.global.filter;import com.ly666.project.global.defaultValue.GlobalProperties;import com.ly666.project.model.jwt.JwtToken;import lombok.extern.slf4j.Slf4j;import org.apache.shiro.web.filter.AccessControlFilter;import org.apache.shiro.web.util.WebUtils;import org.springframework.util.StringUtils;import javax.servlet.ServletRequest;import javax.servlet.ServletResponse;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.IOException;/** * @author ：luoyi * @date ：Created in 2019/5/23 8:57 * @desc : {} */@Slf4jpublic class JwtFilter extends AccessControlFilter {	/**	 * 检测Header里Authorization字段	 * 判断是否登录	 */	private boolean isLoginAttempt(ServletRequest request, ServletResponse response) {		HttpServletRequest req = (HttpServletRequest) request;		String authorization = req.getHeader(GlobalProperties.JWT_REQUEST_AUTH);		return !StringUtils.isEmpty(authorization);	}	/**	 * 登录验证	 */	private boolean executeLogin(ServletRequest request, ServletResponse response) throws IOException {		HttpServletRequest req = WebUtils.toHttp(request);		String authorization = req.getHeader(GlobalProperties.JWT_REQUEST_AUTH);		JwtToken token = new JwtToken(authorization);		// 提交给realm进行登入，如果错误他会抛出异常并被捕获		try {			getSubject(request, response).login(token);		}catch (Exception e){			log.warn("执行登入异常");			WebUtils.toHttp(response).sendError(HttpServletResponse.SC_UNAUTHORIZED,e.getMessage());			return false;		}		// 如果没有抛出异常则代表登入成功，返回true		return true;	}	/**	 * 是否允许访问	 */	@Override	protected boolean isAccessAllowed(ServletRequest request, ServletResponse response, Object mappedValue) throws Exception {		HttpServletRequest req = WebUtils.toHttp(request);		//如果是options请求，直接放行		if ("OPTIONS".equals(req.getMethod().toUpperCase())) {			return true;		}		//请求头中如果存在token，则尝试登入		if (isLoginAttempt(request, response)) {			return executeLogin(request, response);		}		response401(request, response);		return false;	}	@Override	protected boolean onAccessDenied(final ServletRequest request, final ServletResponse response) throws Exception {		return false;	}	/**	 * 将非法请求跳转到 /401	 */	private void response401(ServletRequest request, ServletResponse response) {		try {			HttpServletRequest req = WebUtils.toHttp(request);			req.getRequestDispatcher("/noLogin").forward(request, response);		} catch (Exception e) {			log.error("请求发生错误");		}	}}